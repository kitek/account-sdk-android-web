apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion 34

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        resourceConfigurations += ['en', 'sv', 'no', 'nn', 'nb', 'fi', 'dk']
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('String', 'VERSION_NAME', "\"${project.version}\"")
        }

        debug {
            buildConfigField('String', 'VERSION_NAME', "\"${project.version}\"")
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

ext {
    okHttpVersion = "4.12.0"
    espressoVersion = "3.6.1"
    mockkVersion = "1.13.12"
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.0.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1'
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'

    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'
    api "com.squareup.okhttp3:okhttp:${okHttpVersion}"

    api "androidx.browser:browser:1.8.0"
    implementation 'com.nimbusds:nimbus-jose-jwt:9.40'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.8.4'

    //Logging
    implementation "com.jakewharton.timber:timber:$timber_version"

    //Login prompt
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.12.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.mockk:mockk:${mockkVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${okHttpVersion}"

    testImplementation 'org.robolectric:robolectric:4.13'
    testImplementation 'androidx.test.ext:junit:1.2.1'
    testImplementation "androidx.test.espresso:espresso-core:${espressoVersion}"
    testImplementation "androidx.test.espresso:espresso-intents:${espressoVersion}"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.1'
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation project(":testsupport")
    testImplementation 'org.json:json:20240303'
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }
}

android {
    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
    namespace 'com.schibsted.account.webflows'

    buildFeatures {
        buildConfig true
    }
}

publishing {
    publications {
        release(MavenPublication) {
            afterEvaluate {
                from components.release
            }

            artifactId = 'account-sdk-android-web'
            groupId = 'com.schibsted.account'
            version = project.version

            pom {
                name = 'Schibsted account Android SDK'
                description = "Schibsted account Android SDK ${project.version}"
                url = 'https://github.com/schibsted/account-sdk-android-web'

                scm {
                    connection = 'scm:git:https://github.com/schibsted/account-sdk-android-web.git'
                    url = 'https://github.com/schibsted/account-sdk-android-web'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'schibsted-account'
                        name = 'Schibsted account'
                        email = 'schibstedaccount@schibsted.com'
                    }
                }
            }
        }
    }
}

static String base64Decode(String envVar) {
    def value = System.getenv(envVar)
    if (value == null) {
        return null
    }

    return new String(value.decodeBase64())
}

if (!System.getenv("JITPACK")) {
    signing {
        useInMemoryPgpKeys(base64Decode('SIGNING_KEY'), base64Decode('SIGNING_PASSWORD'))
        sign publishing.publications
    }
}
